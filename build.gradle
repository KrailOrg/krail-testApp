buildscript {
    ext.kaytee_plugin_version = "0.20.1.0"
    ext.kotlin_version = '1.2.31'
    repositories {
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath "uk.q3c.kaytee:kaytee-plugin:$kaytee_plugin_version"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.3'
    }
}

class Pause extends DefaultTask {
    int delaySecs = 5

    @TaskAction
    void pause() {

        int i = delaySecs
        while (i >= 1) {
            println "${i} seconds left"
            i--
            Thread.sleep(1000)
        }
    }
}

plugins {
    id "com.devsoap.plugin.vaadin" version "1.3.0"
    id "com.github.johnrengelman.shadow" version "2.0.3"
    id "com.chrisgahlert.gradle-dcompose-plugin" version "0.9.3"
}

apply plugin: 'uk.q3c.kaytee'
apply plugin: 'kotlin'
apply plugin: 'org.junit.platform.gradle.plugin'

junitPlatform {
    filters {
        engines {
            include 'spek'
        }
    }
}

description = 'Functional test application for Krail and its additional modules'

group = 'uk.q3c.krail'

ext.assertjVersion = '3.8.0'
ext.vaadinTestbenchVersion = '5.0.0'
ext.gsonVersion = '2.3.1'

ext.defaultTestContainer = project.hasProperty("defaultTestContainer") ? prject.getProperty("defaultTestContainer") : "tomcat8"
ext.defaultTestContainerPort = project.hasProperty("defaultTestContainerPort") ? project.getProperty("defaultTestContainerPort") : ""


kaytee {
    version {
        number = "0.17.0.0"
    }
    release {
        mergeToMaster = false
        toBintray = false
    }
}

repositories {
    mavenLocal()
    jcenter()
    mavenCentral()
    maven { url "http://dl.bintray.com/jetbrains/spek" }
}

// guava 23.0 causes an error
// java.lang.IllegalAccessError: tried to access method com.google.common.util.concurrent.SimpleTimeLimiter
configurations.all {
    resolutionStrategy {
        force 'com.google.guava:guava:22.0'
        // GWT requires an old version of the validation API.  Changing to a newer version breaks widgetset compile but throws no errors
        force 'javax.validation:validation-api:1.0.0.GA'

        dependencySubstitution {
            substitute module ('commons-beanutils:commons-beanutils-core') with module ('commons-beanutils:commons-beanutils:1.9.3')
        }
    }
}

dependencies {



    // Kotlin

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"


    //Krail
    compile 'uk.q3c.krail:eventbus-mbassador:0.5.0.0' // for Handler / Listener annotations


    //assert
    compile 'org.assertj:assertj-core:' + assertjVersion

    // html parser
    compile group: 'org.jsoup', name: 'jsoup', version: '1.10.3'



    compile 'uk.q3c.krail:krail:0.17.0.0'

    //UI components
    compile 'de.steinwedel.vaadin.addon:messagebox:2.0.7'
    compile 'org.vaadin.addons:stepper:2.4.0'
    // Missing from stepper
    compile 'org.json:json:20141113'

    // compileOnly because sources requiring dependencies are in production sourceSet
    // but they are not needed at runtime
    compileOnly "org.amshove.kluent:kluent:1.34"
    compileOnly 'com.codeborne:selenide:4.9.1'
    // Dependencies are needed to compile also code in test sourceSet
    testCompile "org.amshove.kluent:kluent:1.34"
    testCompile 'com.codeborne:selenide:4.9.1'

    compile 'io.jsonwebtoken:jjwt:0.9.0'

    testCompile ('org.jetbrains.spek:spek-api:1.1.5'){
        exclude group: 'org.jetbrains.kotlin'
    }
    testRuntime ('org.jetbrains.spek:spek-junit-platform-engine:1.1.5'){
        exclude group: 'org.junit.platform'
        exclude group: 'org.jetbrains.kotlin'
    }
    testCompile 'uk.q3c.util:q3c-testutils:0.11.0.4'
}



vaadin {
    version = '8.3.3'
    logToConsole = true
    push = true
}

vaadinCompile{
    widgetset 'uk.q3c.krail.testapp.widgetset.testAppWidgetset'
}

ext.warName = (project.name.toLowerCase() + '.war')
war {
    exclude 'WEB-INF/lib/*'
    archiveName = warName
}

task copyWar(type: Copy) {
    dependsOn war
    File userHome = new File(System.getProperty('user.home'))
    File source = new File(project.buildDir, "libs")
    File dest = new File(userHome, "tomcat8.5/webapps")
    println ">>>>>>>>>>>>>>>>>>>>>>>>>>> from: ${source} to ${dest}"
    from source
    into dest
}

task pauseForApp(type: Pause) {
    delaySecs = 20
    dependsOn copyWar
}

dcompose {
    tomcat7 {}
    tomcat8 {}
}

// Configure docker images following conventions
// Every service must have
// - Dockerfile in src/main/docker named as `Dockerfile.<serviceName>`
dcompose.services.all { service ->
    def containerName = service.name
    def taskGroup = "Container Tests"

    // Configure dcompose
    service.baseDir = file("build/docker/${containerName}")
    service.dockerFilename = "Dockerfile.${containerName}"
    service.repository = "krail/testApp:${kaytee.version.number}-${containerName}"
    service.portBindings = ["${project["defaultTestContainerPort"]}:8080"]

    // Build a specific task to copy files in container
    def copyFilesTaskName = "copyFilesTo${containerName.capitalize()}ContainerBuildDir"
    task "${copyFilesTaskName}" (type: Sync, group: taskGroup) {
        from war
        from('src/main/docker/') {
            include service.dockerFilename
        }
        into service.baseDir
    }
    project[service.buildImageTaskName].dependsOn "${copyFilesTaskName}"

    // Build a task to prepares test environment
    def containerTestTask = "ContainerTest${containerName.capitalize()}"
    task "pre${containerTestTask}" {
        group taskGroup
        dependsOn war
        dependsOn "${service.startTaskName}"
        doLast {
            // Pass in the configuration properties to the integration test so they can connect container port
            def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
            junitPlatformTestTask.systemProperty 'krail.server.httpPort', service.findHostPort(8080)
        }
    }
    // Create a task to clean up environment after integration tests
    task "post${containerTestTask}" {
        group taskGroup
        mustRunAfter "${containerTestTask}"
        finalizedBy "${service.removeContainerTaskName}"
        doLast {
            // Clean up the dynamic system properties in order to not mess up the UP-TO-DATE checks
            def junitPlatformTestTask = tasks.getByName('junitPlatformTest')
            junitPlatformTestTask.systemProperties.remove 'krail.server.httpPort'
        }
    }

    // Build a task to run tests on the container
    task "${containerTestTask.uncapitalize()}" {
        group taskGroup
        dependsOn "pre${containerTestTask}"
        dependsOn test
    }

}

// Aliases for default test container
task startDefaultTestContainer(dependsOn: "preContainerTest${ext.defaultTestContainer.capitalize()}")
task stopDefaultTestContainer(dependsOn: dcompose.services[ext.defaultTestContainer].stopTaskName)
task removeDefaultTestContainer(dependsOn: dcompose.services[ext.defaultTestContainer].removeContainerTaskName)

// Run default container before running tests
//test.dependsOn startDefaultTestContainer
//junitPlatformTest.mustRunAfter startDefaultTestContainer

vaadinRun {
    serverPort = 8001
    server = 'jetty'
    debug false
}


jar {
    manifest {
        attributes 'Implementation-Title': 'Vaadin Vertx Experiment - Gradle build',
                'Implementation-Version': kaytee.version.number,
                'Main-Class': 'io.vertx.core.Launcher',
                'Main-Verticle': 'uk.q3c.krail.TestAppVerticle'
    }
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/webapp"
        }
    }
}
